// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: vanetza.capnp

#include "vanetza.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<110> b_b08c16032fd6bf4e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
     14,   0,   0,   0,   3,   0,   0,   0,
     83, 223, 186,  49,  53, 190,  80, 203,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0, 151,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  71,   1,   0,   0,
    137,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,   0,
     36,   0,   0,   0,   1,   0,   1,   0,
     98, 133, 108,  27, 100,  50, 255, 164,
     65,   0,   0,   0,  50,   0,   0,   0,
    170, 142, 128,  92,  11, 100, 153, 216,
     61,   0,   0,   0, 122,   0,   0,   0,
     12,   7, 108,   4, 125, 133, 117, 182,
     61,   0,   0,   0, 122,   0,   0,   0,
    149, 244, 175, 215, 207, 132, 240, 158,
     61,   0,   0,   0, 106,   0,   0,   0,
    181, 208, 235, 186,  50,  21, 139, 188,
     61,   0,   0,   0, 106,   0,   0,   0,
    137, 226, 129, 108, 142, 247, 127, 130,
     61,   0,   0,   0, 106,   0,   0,   0,
     22, 178, 145, 153,  34,  24, 192, 152,
     61,   0,   0,   0,  98,   0,   0,   0,
     14, 123, 146, 220,  31,  52,  62, 230,
     61,   0,   0,   0, 138,   0,   0,   0,
    114, 246, 124,  95, 133, 156, 135, 160,
     65,   0,   0,   0,  82,   0,   0,   0,
     70, 114,  97, 109, 101,   0,   0,   0,
     87, 108,  97, 110,  80,  97, 114,  97,
    109, 101, 116, 101, 114, 115,   0,   0,
     67, 118,  50, 120,  80,  97, 114,  97,
    109, 101, 116, 101, 114, 115,   0,   0,
     84, 120,  80,  97, 114,  97, 109, 101,
    116, 101, 114, 115,   0,   0,   0,   0,
     82, 120,  80,  97, 114,  97, 109, 101,
    116, 101, 114, 115,   0,   0,   0,   0,
     68,  97, 116,  97,  76, 105, 115, 116,
    101, 110, 101, 114,   0,   0,   0,   0,
     67,  98, 114,  76, 105, 115, 116, 101,
    110, 101, 114,   0,   0,   0,   0,   0,
     67, 104,  97, 110, 110, 101, 108,  66,
    117, 115, 121,  82,  97, 116, 105, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
     69, 114, 114, 111, 114,  67, 111, 100,
    101,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     54, 216,  18,  70, 140, 216,  35, 220,
    215, 189, 134, 204, 231,  69,  72, 147,
    145,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    189, 223,  44, 153, 220,  66, 105, 229,
    148,  92, 189,  69,  31,  15, 132, 138,
    125,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     18,  76, 247, 198,  16, 174,  46, 188,
     68,  40,  86,  13,  96,  66, 206, 179,
    105,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    198, 180,  55, 193, 221, 167, 133, 165,
    142, 117, 208, 245,  72,   9, 205, 138,
     85,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    141,  96, 119,  98,  30,  14, 193, 162,
    134,  77, 202, 164, 117,  11,   4, 231,
     65,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,   7,   0,   0,   0,
    105, 100, 101, 110, 116, 105, 102, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 114,  97, 110, 115, 109, 105, 116,
     68,  97, 116,  97,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,  68,  97, 116,  97,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,  67,  98, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  83, 111, 117, 114,  99,
    101,  65, 100, 100, 114, 101, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b08c16032fd6bf4e = b_b08c16032fd6bf4e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b08c16032fd6bf4e[] = {
  &s_8a840f1f45bd5c94,
  &s_8acd0948f5d0758e,
  &s_934845e7cc86bdd7,
  &s_a2c10e1e6277608d,
  &s_a585a7ddc137b4c6,
  &s_b3ce42600d562844,
  &s_bc2eae10c6f74c12,
  &s_dc23d88c4612d836,
  &s_e56942dc992cdfbd,
  &s_e7040b75a4ca4d86,
};
static const uint16_t m_b08c16032fd6bf4e[] = {0, 4, 3, 2, 1};
const ::capnp::_::RawSchema s_b08c16032fd6bf4e = {
  0xb08c16032fd6bf4e, b_b08c16032fd6bf4e.words, 110, d_b08c16032fd6bf4e, m_b08c16032fd6bf4e,
  10, 5, nullptr, nullptr, nullptr, { &s_b08c16032fd6bf4e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_a4ff32641b6c8562 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 133, 108,  27, 100,  50, 255, 164,
     24,   0,   0,   0,   1,   0,   0,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     70, 114,  97, 109, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    115, 111, 117, 114,  99, 101,  65, 100,
    100, 114, 101, 115, 115,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115, 116, 105, 110,  97, 116,
    105, 111, 110,  65, 100, 100, 114, 101,
    115, 115,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 121, 108, 111,  97, 100,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4ff32641b6c8562 = b_a4ff32641b6c8562.words;
#if !CAPNP_LITE
static const uint16_t m_a4ff32641b6c8562[] = {1, 2, 0};
static const uint16_t i_a4ff32641b6c8562[] = {0, 1, 2};
const ::capnp::_::RawSchema s_a4ff32641b6c8562 = {
  0xa4ff32641b6c8562, b_a4ff32641b6c8562.words, 66, nullptr, m_a4ff32641b6c8562,
  0, 3, i_a4ff32641b6c8562, nullptr, nullptr, { &s_a4ff32641b6c8562, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_d899640b5c808eaa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    170, 142, 128,  92,  11, 100, 153, 216,
     24,   0,   0,   0,   1,   0,   1,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     87, 108,  97, 110,  80,  97, 114,  97,
    109, 101, 116, 101, 114, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 105, 111, 114, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 119, 101, 114,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97, 114,  97, 116, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d899640b5c808eaa = b_d899640b5c808eaa.words;
#if !CAPNP_LITE
static const uint16_t m_d899640b5c808eaa[] = {2, 1, 0};
static const uint16_t i_d899640b5c808eaa[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d899640b5c808eaa = {
  0xd899640b5c808eaa, b_d899640b5c808eaa.words, 66, nullptr, m_d899640b5c808eaa,
  0, 3, i_d899640b5c808eaa, nullptr, nullptr, { &s_d899640b5c808eaa, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_b675857d046c070c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     12,   7, 108,   4, 125, 133, 117, 182,
     24,   0,   0,   0,   1,   0,   1,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     67, 118,  50, 120,  80,  97, 114,  97,
    109, 101, 116, 101, 114, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 105, 111, 114, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 119, 101, 114,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b675857d046c070c = b_b675857d046c070c.words;
#if !CAPNP_LITE
static const uint16_t m_b675857d046c070c[] = {1, 0};
static const uint16_t i_b675857d046c070c[] = {0, 1};
const ::capnp::_::RawSchema s_b675857d046c070c = {
  0xb675857d046c070c, b_b675857d046c070c.words, 50, nullptr, m_b675857d046c070c,
  0, 2, i_b675857d046c070c, nullptr, nullptr, { &s_b675857d046c070c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_9ef084cfd7aff495 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    149, 244, 175, 215, 207, 132, 240, 158,
     24,   0,   0,   0,   1,   0,   1,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      1,   0,   7,   0,   0,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     84, 120,  80,  97, 114,  97, 109, 101,
    116, 101, 114, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 115, 112, 101,  99, 105, 102,
    105, 101, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 142, 128,  92,  11, 100, 153, 216,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 118,  50, 120,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     12,   7, 108,   4, 125, 133, 117, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9ef084cfd7aff495 = b_9ef084cfd7aff495.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9ef084cfd7aff495[] = {
  &s_b675857d046c070c,
  &s_d899640b5c808eaa,
};
static const uint16_t m_9ef084cfd7aff495[] = {2, 0, 1};
static const uint16_t i_9ef084cfd7aff495[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9ef084cfd7aff495 = {
  0x9ef084cfd7aff495, b_9ef084cfd7aff495.words, 65, d_9ef084cfd7aff495, m_9ef084cfd7aff495,
  2, 3, i_9ef084cfd7aff495, nullptr, nullptr, { &s_9ef084cfd7aff495, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<74> b_bc8b1532baebd0b5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    181, 208, 235, 186,  50,  21, 139, 188,
     24,   0,   0,   0,   1,   0,   2,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      1,   0,   7,   0,   0,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     82, 120,  80,  97, 114,  97, 109, 101,
    116, 101, 114, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    157, 176, 142, 169, 206,  57, 233, 193,
    113,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 115, 112, 101,  99, 105, 102,
    105, 101, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 108,  97, 110,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    170, 142, 128,  92,  11, 100, 153, 216,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 118,  50, 120,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     12,   7, 108,   4, 125, 133, 117, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc8b1532baebd0b5 = b_bc8b1532baebd0b5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bc8b1532baebd0b5[] = {
  &s_b675857d046c070c,
  &s_c1e939cea98eb09d,
  &s_d899640b5c808eaa,
};
static const uint16_t m_bc8b1532baebd0b5[] = {2, 3, 0, 1};
static const uint16_t i_bc8b1532baebd0b5[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_bc8b1532baebd0b5 = {
  0xbc8b1532baebd0b5, b_bc8b1532baebd0b5.words, 74, d_bc8b1532baebd0b5, m_bc8b1532baebd0b5,
  3, 4, i_bc8b1532baebd0b5, nullptr, nullptr, { &s_bc8b1532baebd0b5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_c1e939cea98eb09d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 176, 142, 169, 206,  57, 233, 193,
     37,   0,   0,   0,   1,   0,   2,   0,
    181, 208, 235, 186,  50,  21, 139, 188,
      1,   0,   7,   0,   1,   0,   3,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     82, 120,  80,  97, 114,  97, 109, 101,
    116, 101, 114, 115,  46, 116, 105, 109,
    101, 115, 116,  97, 109, 112,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 114, 100, 119,  97, 114, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 102, 116, 119,  97, 114, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c1e939cea98eb09d = b_c1e939cea98eb09d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c1e939cea98eb09d[] = {
  &s_bc8b1532baebd0b5,
};
static const uint16_t m_c1e939cea98eb09d[] = {1, 0, 2};
static const uint16_t i_c1e939cea98eb09d[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c1e939cea98eb09d = {
  0xc1e939cea98eb09d, b_c1e939cea98eb09d.words, 66, d_c1e939cea98eb09d, m_c1e939cea98eb09d,
  1, 3, i_c1e939cea98eb09d, nullptr, nullptr, { &s_c1e939cea98eb09d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_827ff78e6c81e289 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137, 226, 129, 108, 142, 247, 127, 130,
     24,   0,   0,   0,   3,   0,   0,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     68,  97, 116,  97,  76, 105, 115, 116,
    101, 110, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     91, 160, 121,  36, 221,  42, 230, 196,
    204, 137, 129,  69, 109, 251, 218, 143,
     17,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    111, 110,  68,  97, 116,  97,  73, 110,
    100, 105,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_827ff78e6c81e289 = b_827ff78e6c81e289.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_827ff78e6c81e289[] = {
  &s_8fdafb6d458189cc,
  &s_c4e62add2479a05b,
};
static const uint16_t m_827ff78e6c81e289[] = {0};
const ::capnp::_::RawSchema s_827ff78e6c81e289 = {
  0x827ff78e6c81e289, b_827ff78e6c81e289.words, 32, d_827ff78e6c81e289, m_827ff78e6c81e289,
  2, 1, nullptr, nullptr, nullptr, { &s_827ff78e6c81e289, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_c4e62add2479a05b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     91, 160, 121,  36, 221,  42, 230, 196,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     68,  97, 116,  97,  76, 105, 115, 116,
    101, 110, 101, 114,  46, 111, 110,  68,
     97, 116,  97,  73, 110, 100, 105,  99,
     97, 116, 105, 111, 110,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    102, 114,  97, 109, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     98, 133, 108,  27, 100,  50, 255, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 120,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    181, 208, 235, 186,  50,  21, 139, 188,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c4e62add2479a05b = b_c4e62add2479a05b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c4e62add2479a05b[] = {
  &s_a4ff32641b6c8562,
  &s_bc8b1532baebd0b5,
};
static const uint16_t m_c4e62add2479a05b[] = {0, 1};
static const uint16_t i_c4e62add2479a05b[] = {0, 1};
const ::capnp::_::RawSchema s_c4e62add2479a05b = {
  0xc4e62add2479a05b, b_c4e62add2479a05b.words, 52, d_c4e62add2479a05b, m_c4e62add2479a05b,
  2, 2, i_c4e62add2479a05b, nullptr, nullptr, { &s_c4e62add2479a05b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_8fdafb6d458189cc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204, 137, 129,  69, 109, 251, 218, 143,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     68,  97, 116,  97,  76, 105, 115, 116,
    101, 110, 101, 114,  46, 111, 110,  68,
     97, 116,  97,  73, 110, 100, 105,  99,
     97, 116, 105, 111, 110,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_8fdafb6d458189cc = b_8fdafb6d458189cc.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8fdafb6d458189cc = {
  0x8fdafb6d458189cc, b_8fdafb6d458189cc.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8fdafb6d458189cc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_98c018229991b216 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 178, 145, 153,  34,  24, 192, 152,
     24,   0,   0,   0,   3,   0,   0,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     67,  98, 114,  76, 105, 115, 116, 101,
    110, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     95,   3, 214,  89, 119,  86, 114, 132,
    195, 209,  29, 159, 158, 230,  97, 215,
     17,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    111, 110,  67,  98, 114,  82, 101, 112,
    111, 114, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_98c018229991b216 = b_98c018229991b216.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_98c018229991b216[] = {
  &s_8472567759d6035f,
  &s_d761e69e9f1dd1c3,
};
static const uint16_t m_98c018229991b216[] = {0};
const ::capnp::_::RawSchema s_98c018229991b216 = {
  0x98c018229991b216, b_98c018229991b216.words, 31, d_98c018229991b216, m_98c018229991b216,
  2, 1, nullptr, nullptr, nullptr, { &s_98c018229991b216, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8472567759d6035f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95,   3, 214,  89, 119,  86, 114, 132,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     67,  98, 114,  76, 105, 115, 116, 101,
    110, 101, 114,  46, 111, 110,  67,  98,
    114,  82, 101, 112, 111, 114, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  98, 114,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     14, 123, 146, 220,  31,  52,  62, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8472567759d6035f = b_8472567759d6035f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8472567759d6035f[] = {
  &s_e63e341fdc927b0e,
};
static const uint16_t m_8472567759d6035f[] = {0};
static const uint16_t i_8472567759d6035f[] = {0};
const ::capnp::_::RawSchema s_8472567759d6035f = {
  0x8472567759d6035f, b_8472567759d6035f.words, 35, d_8472567759d6035f, m_8472567759d6035f,
  1, 1, i_8472567759d6035f, nullptr, nullptr, { &s_8472567759d6035f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d761e69e9f1dd1c3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195, 209,  29, 159, 158, 230,  97, 215,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     67,  98, 114,  76, 105, 115, 116, 101,
    110, 101, 114,  46, 111, 110,  67,  98,
    114,  82, 101, 112, 111, 114, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_d761e69e9f1dd1c3 = b_d761e69e9f1dd1c3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d761e69e9f1dd1c3 = {
  0xd761e69e9f1dd1c3, b_d761e69e9f1dd1c3.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d761e69e9f1dd1c3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_e63e341fdc927b0e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14, 123, 146, 220,  31,  52,  62, 230,
     24,   0,   0,   0,   1,   0,   1,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     67, 104,  97, 110, 110, 101, 108,  66,
    117, 115, 121,  82,  97, 116, 105, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     98, 117, 115, 121,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  97, 109, 112, 108, 101, 115,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e63e341fdc927b0e = b_e63e341fdc927b0e.words;
#if !CAPNP_LITE
static const uint16_t m_e63e341fdc927b0e[] = {0, 1};
static const uint16_t i_e63e341fdc927b0e[] = {0, 1};
const ::capnp::_::RawSchema s_e63e341fdc927b0e = {
  0xe63e341fdc927b0e, b_e63e341fdc927b0e.words, 50, nullptr, m_e63e341fdc927b0e,
  0, 2, i_e63e341fdc927b0e, nullptr, nullptr, { &s_e63e341fdc927b0e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_a0879c855f7cf672 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    114, 246, 124,  95, 133, 156, 135, 160,
     24,   0,   0,   0,   2,   0,   0,   0,
     78, 191, 214,  47,   3,  22, 140, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
     69, 114, 114, 111, 114,  67, 111, 100,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 107,   0,   0,   0,   0,   0,   0,
    105, 110, 118,  97, 108, 105, 100,  65,
    114, 103, 117, 109, 101, 110, 116,   0,
    117, 110, 115, 117, 112, 112, 111, 114,
    116, 101, 100,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 110,  97, 108,
     69, 114, 114, 111, 114,   0,   0,   0, }
};
::capnp::word const* const bp_a0879c855f7cf672 = b_a0879c855f7cf672.words;
#if !CAPNP_LITE
static const uint16_t m_a0879c855f7cf672[] = {3, 1, 0, 2};
const ::capnp::_::RawSchema s_a0879c855f7cf672 = {
  0xa0879c855f7cf672, b_a0879c855f7cf672.words, 38, nullptr, m_a0879c855f7cf672,
  0, 4, nullptr, nullptr, nullptr, { &s_a0879c855f7cf672, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(ErrorCode_a0879c855f7cf672, a0879c855f7cf672);
static const ::capnp::_::AlignedData<17> b_dc23d88c4612d836 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54, 216,  18,  70, 140, 216,  35, 220,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    105, 100, 101, 110, 116, 105, 102, 121,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_dc23d88c4612d836 = b_dc23d88c4612d836.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_dc23d88c4612d836 = {
  0xdc23d88c4612d836, b_dc23d88c4612d836.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_dc23d88c4612d836, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_934845e7cc86bdd7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    215, 189, 134, 204, 231,  69,  72, 147,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    105, 100, 101, 110, 116, 105, 102, 121,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114, 115, 105, 111, 110,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_934845e7cc86bdd7 = b_934845e7cc86bdd7.words;
#if !CAPNP_LITE
static const uint16_t m_934845e7cc86bdd7[] = {0, 2, 1};
static const uint16_t i_934845e7cc86bdd7[] = {0, 1, 2};
const ::capnp::_::RawSchema s_934845e7cc86bdd7 = {
  0x934845e7cc86bdd7, b_934845e7cc86bdd7.words, 64, nullptr, m_934845e7cc86bdd7,
  0, 3, i_934845e7cc86bdd7, nullptr, nullptr, { &s_934845e7cc86bdd7, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_e56942dc992cdfbd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189, 223,  44, 153, 220,  66, 105, 229,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    116, 114,  97, 110, 115, 109, 105, 116,
     68,  97, 116,  97,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    102, 114,  97, 109, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     98, 133, 108,  27, 100,  50, 255, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 120,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    149, 244, 175, 215, 207, 132, 240, 158,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e56942dc992cdfbd = b_e56942dc992cdfbd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e56942dc992cdfbd[] = {
  &s_9ef084cfd7aff495,
  &s_a4ff32641b6c8562,
};
static const uint16_t m_e56942dc992cdfbd[] = {0, 1};
static const uint16_t i_e56942dc992cdfbd[] = {0, 1};
const ::capnp::_::RawSchema s_e56942dc992cdfbd = {
  0xe56942dc992cdfbd, b_e56942dc992cdfbd.words, 50, d_e56942dc992cdfbd, m_e56942dc992cdfbd,
  2, 2, i_e56942dc992cdfbd, nullptr, nullptr, { &s_e56942dc992cdfbd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_8a840f1f45bd5c94 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148,  92, 189,  69,  31,  15, 132, 138,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    116, 114,  97, 110, 115, 109, 105, 116,
     68,  97, 116,  97,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    114, 246, 124,  95, 133, 156, 135, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 115, 115,  97, 103, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a840f1f45bd5c94 = b_8a840f1f45bd5c94.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8a840f1f45bd5c94[] = {
  &s_a0879c855f7cf672,
};
static const uint16_t m_8a840f1f45bd5c94[] = {0, 1};
static const uint16_t i_8a840f1f45bd5c94[] = {0, 1};
const ::capnp::_::RawSchema s_8a840f1f45bd5c94 = {
  0x8a840f1f45bd5c94, b_8a840f1f45bd5c94.words, 49, d_8a840f1f45bd5c94, m_8a840f1f45bd5c94,
  1, 2, i_8a840f1f45bd5c94, nullptr, nullptr, { &s_8a840f1f45bd5c94, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bc2eae10c6f74c12 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18,  76, 247, 198,  16, 174,  46, 188,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,  68,  97, 116,  97,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    108, 105, 115, 116, 101, 110, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    137, 226, 129, 108, 142, 247, 127, 130,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc2eae10c6f74c12 = b_bc2eae10c6f74c12.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bc2eae10c6f74c12[] = {
  &s_827ff78e6c81e289,
};
static const uint16_t m_bc2eae10c6f74c12[] = {0};
static const uint16_t i_bc2eae10c6f74c12[] = {0};
const ::capnp::_::RawSchema s_bc2eae10c6f74c12 = {
  0xbc2eae10c6f74c12, b_bc2eae10c6f74c12.words, 35, d_bc2eae10c6f74c12, m_bc2eae10c6f74c12,
  1, 1, i_bc2eae10c6f74c12, nullptr, nullptr, { &s_bc2eae10c6f74c12, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_b3ce42600d562844 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  40,  86,  13,  96,  66, 206, 179,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,  68,  97, 116,  97,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_b3ce42600d562844 = b_b3ce42600d562844.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b3ce42600d562844 = {
  0xb3ce42600d562844, b_b3ce42600d562844.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b3ce42600d562844, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a585a7ddc137b4c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 180,  55, 193, 221, 167, 133, 165,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,  67,  98, 114,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    108, 105, 115, 116, 101, 110, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     22, 178, 145, 153,  34,  24, 192, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a585a7ddc137b4c6 = b_a585a7ddc137b4c6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a585a7ddc137b4c6[] = {
  &s_98c018229991b216,
};
static const uint16_t m_a585a7ddc137b4c6[] = {0};
static const uint16_t i_a585a7ddc137b4c6[] = {0};
const ::capnp::_::RawSchema s_a585a7ddc137b4c6 = {
  0xa585a7ddc137b4c6, b_a585a7ddc137b4c6.words, 35, d_a585a7ddc137b4c6, m_a585a7ddc137b4c6,
  1, 1, i_a585a7ddc137b4c6, nullptr, nullptr, { &s_a585a7ddc137b4c6, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_8acd0948f5d0758e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    142, 117, 208, 245,  72,   9, 205, 138,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,  67,  98, 114,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8acd0948f5d0758e = b_8acd0948f5d0758e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8acd0948f5d0758e = {
  0x8acd0948f5d0758e, b_8acd0948f5d0758e.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8acd0948f5d0758e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a2c10e1e6277608d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    141,  96, 119,  98,  30,  14, 193, 162,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    115, 101, 116,  83, 111, 117, 114,  99,
    101,  65, 100, 100, 114, 101, 115, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a2c10e1e6277608d = b_a2c10e1e6277608d.words;
#if !CAPNP_LITE
static const uint16_t m_a2c10e1e6277608d[] = {0};
static const uint16_t i_a2c10e1e6277608d[] = {0};
const ::capnp::_::RawSchema s_a2c10e1e6277608d = {
  0xa2c10e1e6277608d, b_a2c10e1e6277608d.words, 34, nullptr, m_a2c10e1e6277608d,
  0, 1, i_a2c10e1e6277608d, nullptr, nullptr, { &s_a2c10e1e6277608d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e7040b75a4ca4d86 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    134,  77, 202, 164, 117,  11,   4, 231,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 110, 101, 116, 122,  97,  46,
     99,  97, 112, 110, 112,  58,  76, 105,
    110, 107,  76,  97, 121, 101, 114,  46,
    115, 101, 116,  83, 111, 117, 114,  99,
    101,  65, 100, 100, 114, 101, 115, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    114, 246, 124,  95, 133, 156, 135, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e7040b75a4ca4d86 = b_e7040b75a4ca4d86.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e7040b75a4ca4d86[] = {
  &s_a0879c855f7cf672,
};
static const uint16_t m_e7040b75a4ca4d86[] = {0};
static const uint16_t i_e7040b75a4ca4d86[] = {0};
const ::capnp::_::RawSchema s_e7040b75a4ca4d86 = {
  0xe7040b75a4ca4d86, b_e7040b75a4ca4d86.words, 35, d_e7040b75a4ca4d86, m_e7040b75a4ca4d86,
  1, 1, i_e7040b75a4ca4d86, nullptr, nullptr, { &s_e7040b75a4ca4d86, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace vanetza {
namespace rpc {

#if !CAPNP_LITE
::capnp::Request< ::vanetza::rpc::LinkLayer::IdentifyParams,  ::vanetza::rpc::LinkLayer::IdentifyResults>
LinkLayer::Client::identifyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::vanetza::rpc::LinkLayer::IdentifyParams,  ::vanetza::rpc::LinkLayer::IdentifyResults>(
      0xb08c16032fd6bf4eull, 0, sizeHint, {true});
}
::kj::Promise<void> LinkLayer::Server::identify(IdentifyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "vanetza.capnp:LinkLayer", "identify",
      0xb08c16032fd6bf4eull, 0);
}
::capnp::Request< ::vanetza::rpc::LinkLayer::TransmitDataParams,  ::vanetza::rpc::LinkLayer::TransmitDataResults>
LinkLayer::Client::transmitDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::vanetza::rpc::LinkLayer::TransmitDataParams,  ::vanetza::rpc::LinkLayer::TransmitDataResults>(
      0xb08c16032fd6bf4eull, 1, sizeHint, {true});
}
::kj::Promise<void> LinkLayer::Server::transmitData(TransmitDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "vanetza.capnp:LinkLayer", "transmitData",
      0xb08c16032fd6bf4eull, 1);
}
::capnp::Request< ::vanetza::rpc::LinkLayer::SubscribeDataParams,  ::vanetza::rpc::LinkLayer::SubscribeDataResults>
LinkLayer::Client::subscribeDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::vanetza::rpc::LinkLayer::SubscribeDataParams,  ::vanetza::rpc::LinkLayer::SubscribeDataResults>(
      0xb08c16032fd6bf4eull, 2, sizeHint, {true});
}
::kj::Promise<void> LinkLayer::Server::subscribeData(SubscribeDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "vanetza.capnp:LinkLayer", "subscribeData",
      0xb08c16032fd6bf4eull, 2);
}
::capnp::Request< ::vanetza::rpc::LinkLayer::SubscribeCbrParams,  ::vanetza::rpc::LinkLayer::SubscribeCbrResults>
LinkLayer::Client::subscribeCbrRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::vanetza::rpc::LinkLayer::SubscribeCbrParams,  ::vanetza::rpc::LinkLayer::SubscribeCbrResults>(
      0xb08c16032fd6bf4eull, 3, sizeHint, {true});
}
::kj::Promise<void> LinkLayer::Server::subscribeCbr(SubscribeCbrContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "vanetza.capnp:LinkLayer", "subscribeCbr",
      0xb08c16032fd6bf4eull, 3);
}
::capnp::Request< ::vanetza::rpc::LinkLayer::SetSourceAddressParams,  ::vanetza::rpc::LinkLayer::SetSourceAddressResults>
LinkLayer::Client::setSourceAddressRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::vanetza::rpc::LinkLayer::SetSourceAddressParams,  ::vanetza::rpc::LinkLayer::SetSourceAddressResults>(
      0xb08c16032fd6bf4eull, 4, sizeHint, {true});
}
::kj::Promise<void> LinkLayer::Server::setSourceAddress(SetSourceAddressContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "vanetza.capnp:LinkLayer", "setSourceAddress",
      0xb08c16032fd6bf4eull, 4);
}
::capnp::Capability::Server::DispatchCallResult LinkLayer::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb08c16032fd6bf4eull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("vanetza.capnp:LinkLayer", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult LinkLayer::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        identify(::capnp::Capability::Server::internalGetTypedContext<
             ::vanetza::rpc::LinkLayer::IdentifyParams,  ::vanetza::rpc::LinkLayer::IdentifyResults>(context)),
        false,
        false
      };
    case 1:
      return {
        transmitData(::capnp::Capability::Server::internalGetTypedContext<
             ::vanetza::rpc::LinkLayer::TransmitDataParams,  ::vanetza::rpc::LinkLayer::TransmitDataResults>(context)),
        false,
        false
      };
    case 2:
      return {
        subscribeData(::capnp::Capability::Server::internalGetTypedContext<
             ::vanetza::rpc::LinkLayer::SubscribeDataParams,  ::vanetza::rpc::LinkLayer::SubscribeDataResults>(context)),
        false,
        false
      };
    case 3:
      return {
        subscribeCbr(::capnp::Capability::Server::internalGetTypedContext<
             ::vanetza::rpc::LinkLayer::SubscribeCbrParams,  ::vanetza::rpc::LinkLayer::SubscribeCbrResults>(context)),
        false,
        false
      };
    case 4:
      return {
        setSourceAddress(::capnp::Capability::Server::internalGetTypedContext<
             ::vanetza::rpc::LinkLayer::SetSourceAddressParams,  ::vanetza::rpc::LinkLayer::SetSourceAddressResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "vanetza.capnp:LinkLayer",
          0xb08c16032fd6bf4eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// LinkLayer
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::Frame
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::Frame::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::Frame::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::Frame::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::Frame::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::WlanParameters
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::WlanParameters::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::WlanParameters::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::WlanParameters::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::WlanParameters::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::Cv2xParameters
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::Cv2xParameters::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::Cv2xParameters::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::Cv2xParameters::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::Cv2xParameters::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::TxParameters
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::TxParameters::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::TxParameters::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::TxParameters::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::TxParameters::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::RxParameters
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::RxParameters::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::RxParameters::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::RxParameters::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::RxParameters::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::RxParameters::Timestamp
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::RxParameters::Timestamp::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::RxParameters::Timestamp::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::RxParameters::Timestamp::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::RxParameters::Timestamp::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationParams,  ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationResults>
LinkLayer::DataListener::Client::onDataIndicationRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationParams,  ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationResults>(
      0x827ff78e6c81e289ull, 0, sizeHint, {true});
}
::kj::Promise<void> LinkLayer::DataListener::Server::onDataIndication(OnDataIndicationContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "vanetza.capnp:LinkLayer.DataListener", "onDataIndication",
      0x827ff78e6c81e289ull, 0);
}
::capnp::Capability::Server::DispatchCallResult LinkLayer::DataListener::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x827ff78e6c81e289ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("vanetza.capnp:LinkLayer.DataListener", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult LinkLayer::DataListener::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        onDataIndication(::capnp::Capability::Server::internalGetTypedContext<
             ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationParams,  ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "vanetza.capnp:LinkLayer.DataListener",
          0x827ff78e6c81e289ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// LinkLayer::DataListener
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::DataListener::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::DataListener::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::DataListener::OnDataIndicationParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::DataListener::OnDataIndicationParams::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::DataListener::OnDataIndicationParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::DataListener::OnDataIndicationParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::DataListener::OnDataIndicationParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::DataListener::OnDataIndicationResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::DataListener::OnDataIndicationResults::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::DataListener::OnDataIndicationResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::DataListener::OnDataIndicationResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::DataListener::OnDataIndicationResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportParams,  ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportResults>
LinkLayer::CbrListener::Client::onCbrReportRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportParams,  ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportResults>(
      0x98c018229991b216ull, 0, sizeHint, {true});
}
::kj::Promise<void> LinkLayer::CbrListener::Server::onCbrReport(OnCbrReportContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "vanetza.capnp:LinkLayer.CbrListener", "onCbrReport",
      0x98c018229991b216ull, 0);
}
::capnp::Capability::Server::DispatchCallResult LinkLayer::CbrListener::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x98c018229991b216ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("vanetza.capnp:LinkLayer.CbrListener", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult LinkLayer::CbrListener::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        onCbrReport(::capnp::Capability::Server::internalGetTypedContext<
             ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportParams,  ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "vanetza.capnp:LinkLayer.CbrListener",
          0x98c018229991b216ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// LinkLayer::CbrListener
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::CbrListener::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::CbrListener::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::CbrListener::OnCbrReportParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::CbrListener::OnCbrReportParams::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::CbrListener::OnCbrReportParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::CbrListener::OnCbrReportParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::CbrListener::OnCbrReportParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::CbrListener::OnCbrReportResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::CbrListener::OnCbrReportResults::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::CbrListener::OnCbrReportResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::CbrListener::OnCbrReportResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::CbrListener::OnCbrReportResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::ChannelBusyRatio
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::ChannelBusyRatio::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::ChannelBusyRatio::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::ChannelBusyRatio::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::ChannelBusyRatio::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::IdentifyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::IdentifyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::IdentifyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::IdentifyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::IdentifyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::IdentifyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::IdentifyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::IdentifyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::IdentifyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::IdentifyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::TransmitDataParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::TransmitDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::TransmitDataParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::TransmitDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::TransmitDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::TransmitDataResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::TransmitDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::TransmitDataResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::TransmitDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::TransmitDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::SubscribeDataParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::SubscribeDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::SubscribeDataParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::SubscribeDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::SubscribeDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::SubscribeDataResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::SubscribeDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::SubscribeDataResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::SubscribeDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::SubscribeDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::SubscribeCbrParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::SubscribeCbrParams::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::SubscribeCbrParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::SubscribeCbrParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::SubscribeCbrParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::SubscribeCbrResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::SubscribeCbrResults::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::SubscribeCbrResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::SubscribeCbrResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::SubscribeCbrResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::SetSourceAddressParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::SetSourceAddressParams::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::SetSourceAddressParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::SetSourceAddressParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::SetSourceAddressParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// LinkLayer::SetSourceAddressResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t LinkLayer::SetSourceAddressResults::_capnpPrivate::dataWordSize;
constexpr uint16_t LinkLayer::SetSourceAddressResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind LinkLayer::SetSourceAddressResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LinkLayer::SetSourceAddressResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

