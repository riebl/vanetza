// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: vanetza.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b08c16032fd6bf4e);
CAPNP_DECLARE_SCHEMA(a4ff32641b6c8562);
CAPNP_DECLARE_SCHEMA(d899640b5c808eaa);
CAPNP_DECLARE_SCHEMA(b675857d046c070c);
CAPNP_DECLARE_SCHEMA(9ef084cfd7aff495);
CAPNP_DECLARE_SCHEMA(bc8b1532baebd0b5);
CAPNP_DECLARE_SCHEMA(c1e939cea98eb09d);
CAPNP_DECLARE_SCHEMA(827ff78e6c81e289);
CAPNP_DECLARE_SCHEMA(c4e62add2479a05b);
CAPNP_DECLARE_SCHEMA(8fdafb6d458189cc);
CAPNP_DECLARE_SCHEMA(98c018229991b216);
CAPNP_DECLARE_SCHEMA(8472567759d6035f);
CAPNP_DECLARE_SCHEMA(d761e69e9f1dd1c3);
CAPNP_DECLARE_SCHEMA(e63e341fdc927b0e);
CAPNP_DECLARE_SCHEMA(a0879c855f7cf672);
enum class ErrorCode_a0879c855f7cf672: uint16_t {
  OK,
  INVALID_ARGUMENT,
  UNSUPPORTED,
  INTERNAL_ERROR,
};
CAPNP_DECLARE_ENUM(ErrorCode, a0879c855f7cf672);
CAPNP_DECLARE_SCHEMA(dc23d88c4612d836);
CAPNP_DECLARE_SCHEMA(934845e7cc86bdd7);
CAPNP_DECLARE_SCHEMA(e56942dc992cdfbd);
CAPNP_DECLARE_SCHEMA(8a840f1f45bd5c94);
CAPNP_DECLARE_SCHEMA(bc2eae10c6f74c12);
CAPNP_DECLARE_SCHEMA(b3ce42600d562844);
CAPNP_DECLARE_SCHEMA(a585a7ddc137b4c6);
CAPNP_DECLARE_SCHEMA(8acd0948f5d0758e);
CAPNP_DECLARE_SCHEMA(a2c10e1e6277608d);
CAPNP_DECLARE_SCHEMA(e7040b75a4ca4d86);

}  // namespace schemas
}  // namespace capnp

namespace vanetza {
namespace rpc {

struct LinkLayer {
  LinkLayer() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct Frame;
  struct WlanParameters;
  struct Cv2xParameters;
  struct TxParameters;
  struct RxParameters;
  struct DataListener;
  struct CbrListener;
  struct ChannelBusyRatio;
  typedef ::capnp::schemas::ErrorCode_a0879c855f7cf672 ErrorCode;

  struct IdentifyParams;
  struct IdentifyResults;
  struct TransmitDataParams;
  struct TransmitDataResults;
  struct SubscribeDataParams;
  struct SubscribeDataResults;
  struct SubscribeCbrParams;
  struct SubscribeCbrResults;
  struct SetSourceAddressParams;
  struct SetSourceAddressResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b08c16032fd6bf4e)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct LinkLayer::Frame {
  Frame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4ff32641b6c8562, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::WlanParameters {
  WlanParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d899640b5c808eaa, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::Cv2xParameters {
  Cv2xParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b675857d046c070c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::TxParameters {
  TxParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNSPECIFIED,
    WLAN,
    CV2X,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ef084cfd7aff495, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::RxParameters {
  RxParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNSPECIFIED,
    WLAN,
    CV2X,
  };
  struct Timestamp;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc8b1532baebd0b5, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::RxParameters::Timestamp {
  Timestamp() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    HARDWARE,
    SOFTWARE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1e939cea98eb09d, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::DataListener {
  DataListener() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct OnDataIndicationParams;
  struct OnDataIndicationResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(827ff78e6c81e289)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct LinkLayer::DataListener::OnDataIndicationParams {
  OnDataIndicationParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4e62add2479a05b, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::DataListener::OnDataIndicationResults {
  OnDataIndicationResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8fdafb6d458189cc, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::CbrListener {
  CbrListener() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct OnCbrReportParams;
  struct OnCbrReportResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(98c018229991b216)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct LinkLayer::CbrListener::OnCbrReportParams {
  OnCbrReportParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8472567759d6035f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::CbrListener::OnCbrReportResults {
  OnCbrReportResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d761e69e9f1dd1c3, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::ChannelBusyRatio {
  ChannelBusyRatio() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e63e341fdc927b0e, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::IdentifyParams {
  IdentifyParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc23d88c4612d836, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::IdentifyResults {
  IdentifyResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(934845e7cc86bdd7, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::TransmitDataParams {
  TransmitDataParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e56942dc992cdfbd, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::TransmitDataResults {
  TransmitDataResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a840f1f45bd5c94, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::SubscribeDataParams {
  SubscribeDataParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc2eae10c6f74c12, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::SubscribeDataResults {
  SubscribeDataResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b3ce42600d562844, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::SubscribeCbrParams {
  SubscribeCbrParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a585a7ddc137b4c6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::SubscribeCbrResults {
  SubscribeCbrResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8acd0948f5d0758e, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::SetSourceAddressParams {
  SetSourceAddressParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2c10e1e6277608d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkLayer::SetSourceAddressResults {
  SetSourceAddressResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7040b75a4ca4d86, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class LinkLayer::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef LinkLayer Calls;
  typedef LinkLayer Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::vanetza::rpc::LinkLayer::IdentifyParams,  ::vanetza::rpc::LinkLayer::IdentifyResults> identifyRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::vanetza::rpc::LinkLayer::TransmitDataParams,  ::vanetza::rpc::LinkLayer::TransmitDataResults> transmitDataRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::vanetza::rpc::LinkLayer::SubscribeDataParams,  ::vanetza::rpc::LinkLayer::SubscribeDataResults> subscribeDataRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::vanetza::rpc::LinkLayer::SubscribeCbrParams,  ::vanetza::rpc::LinkLayer::SubscribeCbrResults> subscribeCbrRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::vanetza::rpc::LinkLayer::SetSourceAddressParams,  ::vanetza::rpc::LinkLayer::SetSourceAddressResults> setSourceAddressRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class LinkLayer::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef LinkLayer Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::vanetza::rpc::LinkLayer::IdentifyParams IdentifyParams;
  typedef  ::vanetza::rpc::LinkLayer::IdentifyResults IdentifyResults;
  typedef ::capnp::CallContext<IdentifyParams, IdentifyResults> IdentifyContext;
  virtual ::kj::Promise<void> identify(IdentifyContext context);
  typedef  ::vanetza::rpc::LinkLayer::TransmitDataParams TransmitDataParams;
  typedef  ::vanetza::rpc::LinkLayer::TransmitDataResults TransmitDataResults;
  typedef ::capnp::CallContext<TransmitDataParams, TransmitDataResults> TransmitDataContext;
  virtual ::kj::Promise<void> transmitData(TransmitDataContext context);
  typedef  ::vanetza::rpc::LinkLayer::SubscribeDataParams SubscribeDataParams;
  typedef  ::vanetza::rpc::LinkLayer::SubscribeDataResults SubscribeDataResults;
  typedef ::capnp::CallContext<SubscribeDataParams, SubscribeDataResults> SubscribeDataContext;
  virtual ::kj::Promise<void> subscribeData(SubscribeDataContext context);
  typedef  ::vanetza::rpc::LinkLayer::SubscribeCbrParams SubscribeCbrParams;
  typedef  ::vanetza::rpc::LinkLayer::SubscribeCbrResults SubscribeCbrResults;
  typedef ::capnp::CallContext<SubscribeCbrParams, SubscribeCbrResults> SubscribeCbrContext;
  virtual ::kj::Promise<void> subscribeCbr(SubscribeCbrContext context);
  typedef  ::vanetza::rpc::LinkLayer::SetSourceAddressParams SetSourceAddressParams;
  typedef  ::vanetza::rpc::LinkLayer::SetSourceAddressResults SetSourceAddressResults;
  typedef ::capnp::CallContext<SetSourceAddressParams, SetSourceAddressResults> SetSourceAddressContext;
  virtual ::kj::Promise<void> setSourceAddress(SetSourceAddressContext context);

  inline  ::vanetza::rpc::LinkLayer::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::vanetza::rpc::LinkLayer>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class LinkLayer::Frame::Reader {
public:
  typedef Frame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSourceAddress() const;
  inline  ::capnp::Data::Reader getSourceAddress() const;

  inline bool hasDestinationAddress() const;
  inline  ::capnp::Data::Reader getDestinationAddress() const;

  inline bool hasPayload() const;
  inline  ::capnp::Data::Reader getPayload() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::Frame::Builder {
public:
  typedef Frame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSourceAddress();
  inline  ::capnp::Data::Builder getSourceAddress();
  inline void setSourceAddress( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSourceAddress(unsigned int size);
  inline void adoptSourceAddress(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSourceAddress();

  inline bool hasDestinationAddress();
  inline  ::capnp::Data::Builder getDestinationAddress();
  inline void setDestinationAddress( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDestinationAddress(unsigned int size);
  inline void adoptDestinationAddress(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDestinationAddress();

  inline bool hasPayload();
  inline  ::capnp::Data::Builder getPayload();
  inline void setPayload( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPayload(unsigned int size);
  inline void adoptPayload(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPayload();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::Frame::Pipeline {
public:
  typedef Frame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::WlanParameters::Reader {
public:
  typedef WlanParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPriority() const;

  inline  ::int16_t getPower() const;

  inline  ::uint16_t getDatarate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::WlanParameters::Builder {
public:
  typedef WlanParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPriority();
  inline void setPriority( ::uint8_t value);

  inline  ::int16_t getPower();
  inline void setPower( ::int16_t value);

  inline  ::uint16_t getDatarate();
  inline void setDatarate( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::WlanParameters::Pipeline {
public:
  typedef WlanParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::Cv2xParameters::Reader {
public:
  typedef Cv2xParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPriority() const;

  inline  ::int16_t getPower() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::Cv2xParameters::Builder {
public:
  typedef Cv2xParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPriority();
  inline void setPriority( ::uint8_t value);

  inline  ::int16_t getPower();
  inline void setPower( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::Cv2xParameters::Pipeline {
public:
  typedef Cv2xParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::TxParameters::Reader {
public:
  typedef TxParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnspecified() const;
  inline  ::capnp::Void getUnspecified() const;

  inline bool isWlan() const;
  inline bool hasWlan() const;
  inline  ::vanetza::rpc::LinkLayer::WlanParameters::Reader getWlan() const;

  inline bool isCv2x() const;
  inline bool hasCv2x() const;
  inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader getCv2x() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::TxParameters::Builder {
public:
  typedef TxParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnspecified();
  inline  ::capnp::Void getUnspecified();
  inline void setUnspecified( ::capnp::Void value = ::capnp::VOID);

  inline bool isWlan();
  inline bool hasWlan();
  inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder getWlan();
  inline void setWlan( ::vanetza::rpc::LinkLayer::WlanParameters::Reader value);
  inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder initWlan();
  inline void adoptWlan(::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters> disownWlan();

  inline bool isCv2x();
  inline bool hasCv2x();
  inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder getCv2x();
  inline void setCv2x( ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader value);
  inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder initCv2x();
  inline void adoptCv2x(::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters> disownCv2x();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::TxParameters::Pipeline {
public:
  typedef TxParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::RxParameters::Reader {
public:
  typedef RxParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnspecified() const;
  inline  ::capnp::Void getUnspecified() const;

  inline bool isWlan() const;
  inline bool hasWlan() const;
  inline  ::vanetza::rpc::LinkLayer::WlanParameters::Reader getWlan() const;

  inline bool isCv2x() const;
  inline bool hasCv2x() const;
  inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader getCv2x() const;

  inline typename Timestamp::Reader getTimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::RxParameters::Builder {
public:
  typedef RxParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnspecified();
  inline  ::capnp::Void getUnspecified();
  inline void setUnspecified( ::capnp::Void value = ::capnp::VOID);

  inline bool isWlan();
  inline bool hasWlan();
  inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder getWlan();
  inline void setWlan( ::vanetza::rpc::LinkLayer::WlanParameters::Reader value);
  inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder initWlan();
  inline void adoptWlan(::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters> disownWlan();

  inline bool isCv2x();
  inline bool hasCv2x();
  inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder getCv2x();
  inline void setCv2x( ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader value);
  inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder initCv2x();
  inline void adoptCv2x(::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters> disownCv2x();

  inline typename Timestamp::Builder getTimestamp();
  inline typename Timestamp::Builder initTimestamp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::RxParameters::Pipeline {
public:
  typedef RxParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Timestamp::Pipeline getTimestamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::RxParameters::Timestamp::Reader {
public:
  typedef Timestamp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isHardware() const;
  inline  ::uint64_t getHardware() const;

  inline bool isSoftware() const;
  inline  ::uint64_t getSoftware() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::RxParameters::Timestamp::Builder {
public:
  typedef Timestamp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isHardware();
  inline  ::uint64_t getHardware();
  inline void setHardware( ::uint64_t value);

  inline bool isSoftware();
  inline  ::uint64_t getSoftware();
  inline void setSoftware( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::RxParameters::Timestamp::Pipeline {
public:
  typedef Timestamp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class LinkLayer::DataListener::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef DataListener Calls;
  typedef DataListener Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationParams,  ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationResults> onDataIndicationRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class LinkLayer::DataListener::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef DataListener Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationParams OnDataIndicationParams;
  typedef  ::vanetza::rpc::LinkLayer::DataListener::OnDataIndicationResults OnDataIndicationResults;
  typedef ::capnp::CallContext<OnDataIndicationParams, OnDataIndicationResults> OnDataIndicationContext;
  virtual ::kj::Promise<void> onDataIndication(OnDataIndicationContext context);

  inline  ::vanetza::rpc::LinkLayer::DataListener::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::vanetza::rpc::LinkLayer::DataListener>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class LinkLayer::DataListener::OnDataIndicationParams::Reader {
public:
  typedef OnDataIndicationParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFrame() const;
  inline  ::vanetza::rpc::LinkLayer::Frame::Reader getFrame() const;

  inline bool hasRxParams() const;
  inline  ::vanetza::rpc::LinkLayer::RxParameters::Reader getRxParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::DataListener::OnDataIndicationParams::Builder {
public:
  typedef OnDataIndicationParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFrame();
  inline  ::vanetza::rpc::LinkLayer::Frame::Builder getFrame();
  inline void setFrame( ::vanetza::rpc::LinkLayer::Frame::Reader value);
  inline  ::vanetza::rpc::LinkLayer::Frame::Builder initFrame();
  inline void adoptFrame(::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame> disownFrame();

  inline bool hasRxParams();
  inline  ::vanetza::rpc::LinkLayer::RxParameters::Builder getRxParams();
  inline void setRxParams( ::vanetza::rpc::LinkLayer::RxParameters::Reader value);
  inline  ::vanetza::rpc::LinkLayer::RxParameters::Builder initRxParams();
  inline void adoptRxParams(::capnp::Orphan< ::vanetza::rpc::LinkLayer::RxParameters>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::RxParameters> disownRxParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::DataListener::OnDataIndicationParams::Pipeline {
public:
  typedef OnDataIndicationParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vanetza::rpc::LinkLayer::Frame::Pipeline getFrame();
  inline  ::vanetza::rpc::LinkLayer::RxParameters::Pipeline getRxParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::DataListener::OnDataIndicationResults::Reader {
public:
  typedef OnDataIndicationResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::DataListener::OnDataIndicationResults::Builder {
public:
  typedef OnDataIndicationResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::DataListener::OnDataIndicationResults::Pipeline {
public:
  typedef OnDataIndicationResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class LinkLayer::CbrListener::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef CbrListener Calls;
  typedef CbrListener Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportParams,  ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportResults> onCbrReportRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class LinkLayer::CbrListener::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef CbrListener Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportParams OnCbrReportParams;
  typedef  ::vanetza::rpc::LinkLayer::CbrListener::OnCbrReportResults OnCbrReportResults;
  typedef ::capnp::CallContext<OnCbrReportParams, OnCbrReportResults> OnCbrReportContext;
  virtual ::kj::Promise<void> onCbrReport(OnCbrReportContext context);

  inline  ::vanetza::rpc::LinkLayer::CbrListener::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::vanetza::rpc::LinkLayer::CbrListener>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class LinkLayer::CbrListener::OnCbrReportParams::Reader {
public:
  typedef OnCbrReportParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCbr() const;
  inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Reader getCbr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::CbrListener::OnCbrReportParams::Builder {
public:
  typedef OnCbrReportParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCbr();
  inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Builder getCbr();
  inline void setCbr( ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Reader value);
  inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Builder initCbr();
  inline void adoptCbr(::capnp::Orphan< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::ChannelBusyRatio> disownCbr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::CbrListener::OnCbrReportParams::Pipeline {
public:
  typedef OnCbrReportParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Pipeline getCbr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::CbrListener::OnCbrReportResults::Reader {
public:
  typedef OnCbrReportResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::CbrListener::OnCbrReportResults::Builder {
public:
  typedef OnCbrReportResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::CbrListener::OnCbrReportResults::Pipeline {
public:
  typedef OnCbrReportResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::ChannelBusyRatio::Reader {
public:
  typedef ChannelBusyRatio Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBusy() const;

  inline  ::uint16_t getSamples() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::ChannelBusyRatio::Builder {
public:
  typedef ChannelBusyRatio Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getBusy();
  inline void setBusy( ::uint16_t value);

  inline  ::uint16_t getSamples();
  inline void setSamples( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::ChannelBusyRatio::Pipeline {
public:
  typedef ChannelBusyRatio Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::IdentifyParams::Reader {
public:
  typedef IdentifyParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::IdentifyParams::Builder {
public:
  typedef IdentifyParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::IdentifyParams::Pipeline {
public:
  typedef IdentifyParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::IdentifyResults::Reader {
public:
  typedef IdentifyResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::uint32_t getVersion() const;

  inline bool hasInfo() const;
  inline  ::capnp::Text::Reader getInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::IdentifyResults::Builder {
public:
  typedef IdentifyResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::uint32_t getVersion();
  inline void setVersion( ::uint32_t value);

  inline bool hasInfo();
  inline  ::capnp::Text::Builder getInfo();
  inline void setInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInfo(unsigned int size);
  inline void adoptInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::IdentifyResults::Pipeline {
public:
  typedef IdentifyResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::TransmitDataParams::Reader {
public:
  typedef TransmitDataParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFrame() const;
  inline  ::vanetza::rpc::LinkLayer::Frame::Reader getFrame() const;

  inline bool hasTxParams() const;
  inline  ::vanetza::rpc::LinkLayer::TxParameters::Reader getTxParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::TransmitDataParams::Builder {
public:
  typedef TransmitDataParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFrame();
  inline  ::vanetza::rpc::LinkLayer::Frame::Builder getFrame();
  inline void setFrame( ::vanetza::rpc::LinkLayer::Frame::Reader value);
  inline  ::vanetza::rpc::LinkLayer::Frame::Builder initFrame();
  inline void adoptFrame(::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame> disownFrame();

  inline bool hasTxParams();
  inline  ::vanetza::rpc::LinkLayer::TxParameters::Builder getTxParams();
  inline void setTxParams( ::vanetza::rpc::LinkLayer::TxParameters::Reader value);
  inline  ::vanetza::rpc::LinkLayer::TxParameters::Builder initTxParams();
  inline void adoptTxParams(::capnp::Orphan< ::vanetza::rpc::LinkLayer::TxParameters>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::TxParameters> disownTxParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::TransmitDataParams::Pipeline {
public:
  typedef TransmitDataParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vanetza::rpc::LinkLayer::Frame::Pipeline getFrame();
  inline  ::vanetza::rpc::LinkLayer::TxParameters::Pipeline getTxParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::TransmitDataResults::Reader {
public:
  typedef TransmitDataResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::vanetza::rpc::LinkLayer::ErrorCode getError() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::TransmitDataResults::Builder {
public:
  typedef TransmitDataResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::vanetza::rpc::LinkLayer::ErrorCode getError();
  inline void setError( ::vanetza::rpc::LinkLayer::ErrorCode value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::TransmitDataResults::Pipeline {
public:
  typedef TransmitDataResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::SubscribeDataParams::Reader {
public:
  typedef SubscribeDataParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasListener() const;
#if !CAPNP_LITE
  inline  ::vanetza::rpc::LinkLayer::DataListener::Client getListener() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::SubscribeDataParams::Builder {
public:
  typedef SubscribeDataParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasListener();
#if !CAPNP_LITE
  inline  ::vanetza::rpc::LinkLayer::DataListener::Client getListener();
  inline void setListener( ::vanetza::rpc::LinkLayer::DataListener::Client&& value);
  inline void setListener( ::vanetza::rpc::LinkLayer::DataListener::Client& value);
  inline void adoptListener(::capnp::Orphan< ::vanetza::rpc::LinkLayer::DataListener>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::DataListener> disownListener();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::SubscribeDataParams::Pipeline {
public:
  typedef SubscribeDataParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vanetza::rpc::LinkLayer::DataListener::Client getListener();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::SubscribeDataResults::Reader {
public:
  typedef SubscribeDataResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::SubscribeDataResults::Builder {
public:
  typedef SubscribeDataResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::SubscribeDataResults::Pipeline {
public:
  typedef SubscribeDataResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::SubscribeCbrParams::Reader {
public:
  typedef SubscribeCbrParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasListener() const;
#if !CAPNP_LITE
  inline  ::vanetza::rpc::LinkLayer::CbrListener::Client getListener() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::SubscribeCbrParams::Builder {
public:
  typedef SubscribeCbrParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasListener();
#if !CAPNP_LITE
  inline  ::vanetza::rpc::LinkLayer::CbrListener::Client getListener();
  inline void setListener( ::vanetza::rpc::LinkLayer::CbrListener::Client&& value);
  inline void setListener( ::vanetza::rpc::LinkLayer::CbrListener::Client& value);
  inline void adoptListener(::capnp::Orphan< ::vanetza::rpc::LinkLayer::CbrListener>&& value);
  inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::CbrListener> disownListener();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::SubscribeCbrParams::Pipeline {
public:
  typedef SubscribeCbrParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vanetza::rpc::LinkLayer::CbrListener::Client getListener();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::SubscribeCbrResults::Reader {
public:
  typedef SubscribeCbrResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::SubscribeCbrResults::Builder {
public:
  typedef SubscribeCbrResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::SubscribeCbrResults::Pipeline {
public:
  typedef SubscribeCbrResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::SetSourceAddressParams::Reader {
public:
  typedef SetSourceAddressParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAddress() const;
  inline  ::capnp::Data::Reader getAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::SetSourceAddressParams::Builder {
public:
  typedef SetSourceAddressParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAddress();
  inline  ::capnp::Data::Builder getAddress();
  inline void setAddress( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initAddress(unsigned int size);
  inline void adoptAddress(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownAddress();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::SetSourceAddressParams::Pipeline {
public:
  typedef SetSourceAddressParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkLayer::SetSourceAddressResults::Reader {
public:
  typedef SetSourceAddressResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::vanetza::rpc::LinkLayer::ErrorCode getError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkLayer::SetSourceAddressResults::Builder {
public:
  typedef SetSourceAddressResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::vanetza::rpc::LinkLayer::ErrorCode getError();
  inline void setError( ::vanetza::rpc::LinkLayer::ErrorCode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkLayer::SetSourceAddressResults::Pipeline {
public:
  typedef SetSourceAddressResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline LinkLayer::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline LinkLayer::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline LinkLayer::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline LinkLayer::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline LinkLayer::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::vanetza::rpc::LinkLayer::Client& LinkLayer::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::vanetza::rpc::LinkLayer::Client& LinkLayer::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool LinkLayer::Frame::Reader::hasSourceAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::Frame::Builder::hasSourceAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LinkLayer::Frame::Reader::getSourceAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LinkLayer::Frame::Builder::getSourceAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::Frame::Builder::setSourceAddress( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LinkLayer::Frame::Builder::initSourceAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LinkLayer::Frame::Builder::adoptSourceAddress(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LinkLayer::Frame::Builder::disownSourceAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkLayer::Frame::Reader::hasDestinationAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::Frame::Builder::hasDestinationAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LinkLayer::Frame::Reader::getDestinationAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LinkLayer::Frame::Builder::getDestinationAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LinkLayer::Frame::Builder::setDestinationAddress( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LinkLayer::Frame::Builder::initDestinationAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LinkLayer::Frame::Builder::adoptDestinationAddress(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LinkLayer::Frame::Builder::disownDestinationAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LinkLayer::Frame::Reader::hasPayload() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::Frame::Builder::hasPayload() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LinkLayer::Frame::Reader::getPayload() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LinkLayer::Frame::Builder::getPayload() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LinkLayer::Frame::Builder::setPayload( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LinkLayer::Frame::Builder::initPayload(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LinkLayer::Frame::Builder::adoptPayload(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LinkLayer::Frame::Builder::disownPayload() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t LinkLayer::WlanParameters::Reader::getPriority() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LinkLayer::WlanParameters::Builder::getPriority() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::WlanParameters::Builder::setPriority( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LinkLayer::WlanParameters::Reader::getPower() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LinkLayer::WlanParameters::Builder::getPower() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::WlanParameters::Builder::setPower( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LinkLayer::WlanParameters::Reader::getDatarate() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LinkLayer::WlanParameters::Builder::getDatarate() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::WlanParameters::Builder::setDatarate( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LinkLayer::Cv2xParameters::Reader::getPriority() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LinkLayer::Cv2xParameters::Builder::getPriority() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::Cv2xParameters::Builder::setPriority( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LinkLayer::Cv2xParameters::Reader::getPower() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LinkLayer::Cv2xParameters::Builder::getPower() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::Cv2xParameters::Builder::setPower( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::vanetza::rpc::LinkLayer::TxParameters::Which LinkLayer::TxParameters::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::vanetza::rpc::LinkLayer::TxParameters::Which LinkLayer::TxParameters::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LinkLayer::TxParameters::Reader::isUnspecified() const {
  return which() == LinkLayer::TxParameters::UNSPECIFIED;
}
inline bool LinkLayer::TxParameters::Builder::isUnspecified() {
  return which() == LinkLayer::TxParameters::UNSPECIFIED;
}
inline  ::capnp::Void LinkLayer::TxParameters::Reader::getUnspecified() const {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::UNSPECIFIED),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void LinkLayer::TxParameters::Builder::getUnspecified() {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::UNSPECIFIED),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::TxParameters::Builder::setUnspecified( ::capnp::Void value) {
  _builder.setDataField<LinkLayer::TxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::TxParameters::UNSPECIFIED);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LinkLayer::TxParameters::Reader::isWlan() const {
  return which() == LinkLayer::TxParameters::WLAN;
}
inline bool LinkLayer::TxParameters::Builder::isWlan() {
  return which() == LinkLayer::TxParameters::WLAN;
}
inline bool LinkLayer::TxParameters::Reader::hasWlan() const {
  if (which() != LinkLayer::TxParameters::WLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::TxParameters::Builder::hasWlan() {
  if (which() != LinkLayer::TxParameters::WLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::WlanParameters::Reader LinkLayer::TxParameters::Reader::getWlan() const {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::WLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder LinkLayer::TxParameters::Builder::getWlan() {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::WLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::TxParameters::Builder::setWlan( ::vanetza::rpc::LinkLayer::WlanParameters::Reader value) {
  _builder.setDataField<LinkLayer::TxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::TxParameters::WLAN);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder LinkLayer::TxParameters::Builder::initWlan() {
  _builder.setDataField<LinkLayer::TxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::TxParameters::WLAN);
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::TxParameters::Builder::adoptWlan(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters>&& value) {
  _builder.setDataField<LinkLayer::TxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::TxParameters::WLAN);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters> LinkLayer::TxParameters::Builder::disownWlan() {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::WLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkLayer::TxParameters::Reader::isCv2x() const {
  return which() == LinkLayer::TxParameters::CV2X;
}
inline bool LinkLayer::TxParameters::Builder::isCv2x() {
  return which() == LinkLayer::TxParameters::CV2X;
}
inline bool LinkLayer::TxParameters::Reader::hasCv2x() const {
  if (which() != LinkLayer::TxParameters::CV2X) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::TxParameters::Builder::hasCv2x() {
  if (which() != LinkLayer::TxParameters::CV2X) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader LinkLayer::TxParameters::Reader::getCv2x() const {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::CV2X),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder LinkLayer::TxParameters::Builder::getCv2x() {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::CV2X),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::TxParameters::Builder::setCv2x( ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader value) {
  _builder.setDataField<LinkLayer::TxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::TxParameters::CV2X);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder LinkLayer::TxParameters::Builder::initCv2x() {
  _builder.setDataField<LinkLayer::TxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::TxParameters::CV2X);
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::TxParameters::Builder::adoptCv2x(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters>&& value) {
  _builder.setDataField<LinkLayer::TxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::TxParameters::CV2X);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters> LinkLayer::TxParameters::Builder::disownCv2x() {
  KJ_IREQUIRE((which() == LinkLayer::TxParameters::CV2X),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::vanetza::rpc::LinkLayer::RxParameters::Which LinkLayer::RxParameters::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::vanetza::rpc::LinkLayer::RxParameters::Which LinkLayer::RxParameters::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LinkLayer::RxParameters::Reader::isUnspecified() const {
  return which() == LinkLayer::RxParameters::UNSPECIFIED;
}
inline bool LinkLayer::RxParameters::Builder::isUnspecified() {
  return which() == LinkLayer::RxParameters::UNSPECIFIED;
}
inline  ::capnp::Void LinkLayer::RxParameters::Reader::getUnspecified() const {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::UNSPECIFIED),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void LinkLayer::RxParameters::Builder::getUnspecified() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::UNSPECIFIED),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::RxParameters::Builder::setUnspecified( ::capnp::Void value) {
  _builder.setDataField<LinkLayer::RxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::UNSPECIFIED);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LinkLayer::RxParameters::Reader::isWlan() const {
  return which() == LinkLayer::RxParameters::WLAN;
}
inline bool LinkLayer::RxParameters::Builder::isWlan() {
  return which() == LinkLayer::RxParameters::WLAN;
}
inline bool LinkLayer::RxParameters::Reader::hasWlan() const {
  if (which() != LinkLayer::RxParameters::WLAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::RxParameters::Builder::hasWlan() {
  if (which() != LinkLayer::RxParameters::WLAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::WlanParameters::Reader LinkLayer::RxParameters::Reader::getWlan() const {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::WLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder LinkLayer::RxParameters::Builder::getWlan() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::WLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::RxParameters::Builder::setWlan( ::vanetza::rpc::LinkLayer::WlanParameters::Reader value) {
  _builder.setDataField<LinkLayer::RxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::WLAN);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::WlanParameters::Builder LinkLayer::RxParameters::Builder::initWlan() {
  _builder.setDataField<LinkLayer::RxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::WLAN);
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::RxParameters::Builder::adoptWlan(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters>&& value) {
  _builder.setDataField<LinkLayer::RxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::WLAN);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::WlanParameters> LinkLayer::RxParameters::Builder::disownWlan() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::WLAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::WlanParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkLayer::RxParameters::Reader::isCv2x() const {
  return which() == LinkLayer::RxParameters::CV2X;
}
inline bool LinkLayer::RxParameters::Builder::isCv2x() {
  return which() == LinkLayer::RxParameters::CV2X;
}
inline bool LinkLayer::RxParameters::Reader::hasCv2x() const {
  if (which() != LinkLayer::RxParameters::CV2X) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::RxParameters::Builder::hasCv2x() {
  if (which() != LinkLayer::RxParameters::CV2X) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader LinkLayer::RxParameters::Reader::getCv2x() const {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::CV2X),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder LinkLayer::RxParameters::Builder::getCv2x() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::CV2X),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::RxParameters::Builder::setCv2x( ::vanetza::rpc::LinkLayer::Cv2xParameters::Reader value) {
  _builder.setDataField<LinkLayer::RxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::CV2X);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::Cv2xParameters::Builder LinkLayer::RxParameters::Builder::initCv2x() {
  _builder.setDataField<LinkLayer::RxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::CV2X);
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::RxParameters::Builder::adoptCv2x(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters>&& value) {
  _builder.setDataField<LinkLayer::RxParameters::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::CV2X);
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Cv2xParameters> LinkLayer::RxParameters::Builder::disownCv2x() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::CV2X),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Cv2xParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename LinkLayer::RxParameters::Timestamp::Reader LinkLayer::RxParameters::Reader::getTimestamp() const {
  return typename LinkLayer::RxParameters::Timestamp::Reader(_reader);
}
inline typename LinkLayer::RxParameters::Timestamp::Builder LinkLayer::RxParameters::Builder::getTimestamp() {
  return typename LinkLayer::RxParameters::Timestamp::Builder(_builder);
}
#if !CAPNP_LITE
inline typename LinkLayer::RxParameters::Timestamp::Pipeline LinkLayer::RxParameters::Pipeline::getTimestamp() {
  return typename LinkLayer::RxParameters::Timestamp::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename LinkLayer::RxParameters::Timestamp::Builder LinkLayer::RxParameters::Builder::initTimestamp() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename LinkLayer::RxParameters::Timestamp::Builder(_builder);
}
inline  ::vanetza::rpc::LinkLayer::RxParameters::Timestamp::Which LinkLayer::RxParameters::Timestamp::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::vanetza::rpc::LinkLayer::RxParameters::Timestamp::Which LinkLayer::RxParameters::Timestamp::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LinkLayer::RxParameters::Timestamp::Reader::isNone() const {
  return which() == LinkLayer::RxParameters::Timestamp::NONE;
}
inline bool LinkLayer::RxParameters::Timestamp::Builder::isNone() {
  return which() == LinkLayer::RxParameters::Timestamp::NONE;
}
inline  ::capnp::Void LinkLayer::RxParameters::Timestamp::Reader::getNone() const {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::Timestamp::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void LinkLayer::RxParameters::Timestamp::Builder::getNone() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::Timestamp::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::RxParameters::Timestamp::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<LinkLayer::RxParameters::Timestamp::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::Timestamp::NONE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LinkLayer::RxParameters::Timestamp::Reader::isHardware() const {
  return which() == LinkLayer::RxParameters::Timestamp::HARDWARE;
}
inline bool LinkLayer::RxParameters::Timestamp::Builder::isHardware() {
  return which() == LinkLayer::RxParameters::Timestamp::HARDWARE;
}
inline  ::uint64_t LinkLayer::RxParameters::Timestamp::Reader::getHardware() const {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::Timestamp::HARDWARE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LinkLayer::RxParameters::Timestamp::Builder::getHardware() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::Timestamp::HARDWARE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::RxParameters::Timestamp::Builder::setHardware( ::uint64_t value) {
  _builder.setDataField<LinkLayer::RxParameters::Timestamp::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::Timestamp::HARDWARE);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LinkLayer::RxParameters::Timestamp::Reader::isSoftware() const {
  return which() == LinkLayer::RxParameters::Timestamp::SOFTWARE;
}
inline bool LinkLayer::RxParameters::Timestamp::Builder::isSoftware() {
  return which() == LinkLayer::RxParameters::Timestamp::SOFTWARE;
}
inline  ::uint64_t LinkLayer::RxParameters::Timestamp::Reader::getSoftware() const {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::Timestamp::SOFTWARE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LinkLayer::RxParameters::Timestamp::Builder::getSoftware() {
  KJ_IREQUIRE((which() == LinkLayer::RxParameters::Timestamp::SOFTWARE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::RxParameters::Timestamp::Builder::setSoftware( ::uint64_t value) {
  _builder.setDataField<LinkLayer::RxParameters::Timestamp::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, LinkLayer::RxParameters::Timestamp::SOFTWARE);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline LinkLayer::DataListener::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline LinkLayer::DataListener::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline LinkLayer::DataListener::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline LinkLayer::DataListener::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline LinkLayer::DataListener::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::vanetza::rpc::LinkLayer::DataListener::Client& LinkLayer::DataListener::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::vanetza::rpc::LinkLayer::DataListener::Client& LinkLayer::DataListener::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool LinkLayer::DataListener::OnDataIndicationParams::Reader::hasFrame() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::DataListener::OnDataIndicationParams::Builder::hasFrame() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::Frame::Reader LinkLayer::DataListener::OnDataIndicationParams::Reader::getFrame() const {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::Frame::Builder LinkLayer::DataListener::OnDataIndicationParams::Builder::getFrame() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vanetza::rpc::LinkLayer::Frame::Pipeline LinkLayer::DataListener::OnDataIndicationParams::Pipeline::getFrame() {
  return  ::vanetza::rpc::LinkLayer::Frame::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LinkLayer::DataListener::OnDataIndicationParams::Builder::setFrame( ::vanetza::rpc::LinkLayer::Frame::Reader value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::Frame::Builder LinkLayer::DataListener::OnDataIndicationParams::Builder::initFrame() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::DataListener::OnDataIndicationParams::Builder::adoptFrame(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame>&& value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame> LinkLayer::DataListener::OnDataIndicationParams::Builder::disownFrame() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkLayer::DataListener::OnDataIndicationParams::Reader::hasRxParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::DataListener::OnDataIndicationParams::Builder::hasRxParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::RxParameters::Reader LinkLayer::DataListener::OnDataIndicationParams::Reader::getRxParams() const {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::RxParameters>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::RxParameters::Builder LinkLayer::DataListener::OnDataIndicationParams::Builder::getRxParams() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::RxParameters>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vanetza::rpc::LinkLayer::RxParameters::Pipeline LinkLayer::DataListener::OnDataIndicationParams::Pipeline::getRxParams() {
  return  ::vanetza::rpc::LinkLayer::RxParameters::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LinkLayer::DataListener::OnDataIndicationParams::Builder::setRxParams( ::vanetza::rpc::LinkLayer::RxParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::RxParameters>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::RxParameters::Builder LinkLayer::DataListener::OnDataIndicationParams::Builder::initRxParams() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::RxParameters>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LinkLayer::DataListener::OnDataIndicationParams::Builder::adoptRxParams(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::RxParameters>&& value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::RxParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::RxParameters> LinkLayer::DataListener::OnDataIndicationParams::Builder::disownRxParams() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::RxParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline LinkLayer::CbrListener::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline LinkLayer::CbrListener::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline LinkLayer::CbrListener::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline LinkLayer::CbrListener::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline LinkLayer::CbrListener::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::vanetza::rpc::LinkLayer::CbrListener::Client& LinkLayer::CbrListener::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::vanetza::rpc::LinkLayer::CbrListener::Client& LinkLayer::CbrListener::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool LinkLayer::CbrListener::OnCbrReportParams::Reader::hasCbr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::CbrListener::OnCbrReportParams::Builder::hasCbr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Reader LinkLayer::CbrListener::OnCbrReportParams::Reader::getCbr() const {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Builder LinkLayer::CbrListener::OnCbrReportParams::Builder::getCbr() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Pipeline LinkLayer::CbrListener::OnCbrReportParams::Pipeline::getCbr() {
  return  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LinkLayer::CbrListener::OnCbrReportParams::Builder::setCbr( ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Reader value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::ChannelBusyRatio::Builder LinkLayer::CbrListener::OnCbrReportParams::Builder::initCbr() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::CbrListener::OnCbrReportParams::Builder::adoptCbr(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>&& value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::ChannelBusyRatio> LinkLayer::CbrListener::OnCbrReportParams::Builder::disownCbr() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::ChannelBusyRatio>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t LinkLayer::ChannelBusyRatio::Reader::getBusy() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LinkLayer::ChannelBusyRatio::Builder::getBusy() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::ChannelBusyRatio::Builder::setBusy( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LinkLayer::ChannelBusyRatio::Reader::getSamples() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LinkLayer::ChannelBusyRatio::Builder::getSamples() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::ChannelBusyRatio::Builder::setSamples( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LinkLayer::IdentifyResults::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LinkLayer::IdentifyResults::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::IdentifyResults::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LinkLayer::IdentifyResults::Reader::getVersion() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LinkLayer::IdentifyResults::Builder::getVersion() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::IdentifyResults::Builder::setVersion( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LinkLayer::IdentifyResults::Reader::hasInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::IdentifyResults::Builder::hasInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LinkLayer::IdentifyResults::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LinkLayer::IdentifyResults::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::IdentifyResults::Builder::setInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LinkLayer::IdentifyResults::Builder::initInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LinkLayer::IdentifyResults::Builder::adoptInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LinkLayer::IdentifyResults::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkLayer::TransmitDataParams::Reader::hasFrame() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::TransmitDataParams::Builder::hasFrame() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::Frame::Reader LinkLayer::TransmitDataParams::Reader::getFrame() const {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::Frame::Builder LinkLayer::TransmitDataParams::Builder::getFrame() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vanetza::rpc::LinkLayer::Frame::Pipeline LinkLayer::TransmitDataParams::Pipeline::getFrame() {
  return  ::vanetza::rpc::LinkLayer::Frame::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LinkLayer::TransmitDataParams::Builder::setFrame( ::vanetza::rpc::LinkLayer::Frame::Reader value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::Frame::Builder LinkLayer::TransmitDataParams::Builder::initFrame() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::TransmitDataParams::Builder::adoptFrame(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame>&& value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::Frame> LinkLayer::TransmitDataParams::Builder::disownFrame() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::Frame>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkLayer::TransmitDataParams::Reader::hasTxParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::TransmitDataParams::Builder::hasTxParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vanetza::rpc::LinkLayer::TxParameters::Reader LinkLayer::TransmitDataParams::Reader::getTxParams() const {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::TxParameters>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::TxParameters::Builder LinkLayer::TransmitDataParams::Builder::getTxParams() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::TxParameters>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vanetza::rpc::LinkLayer::TxParameters::Pipeline LinkLayer::TransmitDataParams::Pipeline::getTxParams() {
  return  ::vanetza::rpc::LinkLayer::TxParameters::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LinkLayer::TransmitDataParams::Builder::setTxParams( ::vanetza::rpc::LinkLayer::TxParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::TxParameters>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vanetza::rpc::LinkLayer::TxParameters::Builder LinkLayer::TransmitDataParams::Builder::initTxParams() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::TxParameters>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LinkLayer::TransmitDataParams::Builder::adoptTxParams(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::TxParameters>&& value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::TxParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::TxParameters> LinkLayer::TransmitDataParams::Builder::disownTxParams() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::TxParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::vanetza::rpc::LinkLayer::ErrorCode LinkLayer::TransmitDataResults::Reader::getError() const {
  return _reader.getDataField< ::vanetza::rpc::LinkLayer::ErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::vanetza::rpc::LinkLayer::ErrorCode LinkLayer::TransmitDataResults::Builder::getError() {
  return _builder.getDataField< ::vanetza::rpc::LinkLayer::ErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::TransmitDataResults::Builder::setError( ::vanetza::rpc::LinkLayer::ErrorCode value) {
  _builder.setDataField< ::vanetza::rpc::LinkLayer::ErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LinkLayer::TransmitDataResults::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::TransmitDataResults::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LinkLayer::TransmitDataResults::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LinkLayer::TransmitDataResults::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::TransmitDataResults::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LinkLayer::TransmitDataResults::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LinkLayer::TransmitDataResults::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LinkLayer::TransmitDataResults::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkLayer::SubscribeDataParams::Reader::hasListener() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::SubscribeDataParams::Builder::hasListener() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::vanetza::rpc::LinkLayer::DataListener::Client LinkLayer::SubscribeDataParams::Reader::getListener() const {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::DataListener>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::DataListener::Client LinkLayer::SubscribeDataParams::Builder::getListener() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::DataListener>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::DataListener::Client LinkLayer::SubscribeDataParams::Pipeline::getListener() {
  return  ::vanetza::rpc::LinkLayer::DataListener::Client(_typeless.getPointerField(0).asCap());
}
inline void LinkLayer::SubscribeDataParams::Builder::setListener( ::vanetza::rpc::LinkLayer::DataListener::Client&& cap) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::DataListener>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void LinkLayer::SubscribeDataParams::Builder::setListener( ::vanetza::rpc::LinkLayer::DataListener::Client& cap) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::DataListener>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void LinkLayer::SubscribeDataParams::Builder::adoptListener(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::DataListener>&& value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::DataListener>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::DataListener> LinkLayer::SubscribeDataParams::Builder::disownListener() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::DataListener>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool LinkLayer::SubscribeCbrParams::Reader::hasListener() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::SubscribeCbrParams::Builder::hasListener() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::vanetza::rpc::LinkLayer::CbrListener::Client LinkLayer::SubscribeCbrParams::Reader::getListener() const {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::CbrListener>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::CbrListener::Client LinkLayer::SubscribeCbrParams::Builder::getListener() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::CbrListener>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vanetza::rpc::LinkLayer::CbrListener::Client LinkLayer::SubscribeCbrParams::Pipeline::getListener() {
  return  ::vanetza::rpc::LinkLayer::CbrListener::Client(_typeless.getPointerField(0).asCap());
}
inline void LinkLayer::SubscribeCbrParams::Builder::setListener( ::vanetza::rpc::LinkLayer::CbrListener::Client&& cap) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::CbrListener>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void LinkLayer::SubscribeCbrParams::Builder::setListener( ::vanetza::rpc::LinkLayer::CbrListener::Client& cap) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::CbrListener>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void LinkLayer::SubscribeCbrParams::Builder::adoptListener(
    ::capnp::Orphan< ::vanetza::rpc::LinkLayer::CbrListener>&& value) {
  ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::CbrListener>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vanetza::rpc::LinkLayer::CbrListener> LinkLayer::SubscribeCbrParams::Builder::disownListener() {
  return ::capnp::_::PointerHelpers< ::vanetza::rpc::LinkLayer::CbrListener>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool LinkLayer::SetSourceAddressParams::Reader::hasAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkLayer::SetSourceAddressParams::Builder::hasAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LinkLayer::SetSourceAddressParams::Reader::getAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LinkLayer::SetSourceAddressParams::Builder::getAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkLayer::SetSourceAddressParams::Builder::setAddress( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LinkLayer::SetSourceAddressParams::Builder::initAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LinkLayer::SetSourceAddressParams::Builder::adoptAddress(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LinkLayer::SetSourceAddressParams::Builder::disownAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::vanetza::rpc::LinkLayer::ErrorCode LinkLayer::SetSourceAddressResults::Reader::getError() const {
  return _reader.getDataField< ::vanetza::rpc::LinkLayer::ErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::vanetza::rpc::LinkLayer::ErrorCode LinkLayer::SetSourceAddressResults::Builder::getError() {
  return _builder.getDataField< ::vanetza::rpc::LinkLayer::ErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkLayer::SetSourceAddressResults::Builder::setError( ::vanetza::rpc::LinkLayer::ErrorCode value) {
  _builder.setDataField< ::vanetza::rpc::LinkLayer::ErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

